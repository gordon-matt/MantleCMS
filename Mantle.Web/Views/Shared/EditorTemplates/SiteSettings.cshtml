@using Mantle.Web
@using Mantle.Web.Configuration
@using Mantle.Web.Mvc
@addTagHelper *, Mantle.Web
@inject Microsoft.Extensions.Localization.IStringLocalizer T

@model SiteSettings

<div id="settings-content">
    @using (var tabs = Html.ExtensoUI().Begin(new Tabs()))
    {
        tabs.Tab(T[MantleWebLocalizableStrings.Settings.Site.Tabs.General], "tab-general");
        tabs.Tab(T[MantleWebLocalizableStrings.Settings.Site.Tabs.Themes], "tab-themes");
        tabs.Tab(T[MantleWebLocalizableStrings.Settings.Site.Tabs.Localization], "tab-localization");
        tabs.Tab(T[MantleWebLocalizableStrings.Settings.Site.Tabs.SEO], "tab-seo");
        tabs.Tab(T[MantleWebLocalizableStrings.Settings.Site.Tabs.StaticAssets], "tab-static-assets");

        using (var tab = tabs.BeginPanel())
        {
            <mantle-input asp-for="SiteName" asp-label="@T[MantleWebLocalizableStrings.Settings.Site.SiteName]" asp-validation-msg="true" />
            <mantle-input asp-for="DefaultFrontendLayoutPath" asp-label="@T[MantleWebLocalizableStrings.Settings.Site.DefaultFrontendLayoutPath]" asp-validation-msg="true" />
            <mantle-input asp-for="AdminLayoutPath" asp-label="@T[MantleWebLocalizableStrings.Settings.Site.AdminLayoutPath]" asp-validation-msg="true" />
            <mantle-input asp-for="DefaultGridPageSize" asp-label="@T[MantleWebLocalizableStrings.Settings.Site.DefaultGridPageSize]" asp-validation-msg="true" />
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="mb-3">
                @Html.LabelFor(m => m.DefaultTheme)
                @Html.Mantle().ThemesDropDownListFor(m => m.DefaultTheme, new { @class = "form-control", data_bind = "value: defaultTheme" })
                @Html.ValidationMessageFor(m => m.DefaultTheme)
            </div>
            <mantle-input asp-for="AllowUserToSelectTheme" asp-label="@T[MantleWebLocalizableStrings.Settings.Site.AllowUserToSelectTheme]" />
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="mb-3">
                @Html.LabelFor(m => m.DefaultLanguage)
                @Html.Mantle().LanguagesDropDownListFor(m => m.DefaultLanguage, new { @class = "form-control", data_bind = "value: defaultLanguage" })
                @Html.ValidationMessageFor(m => m.DefaultLanguage)
            </div>
        }
        using (var tab = tabs.BeginPanel())
        {
            <mantle-input asp-for="DefaultMetaKeywords" asp-label="@T[MantleWebLocalizableStrings.Settings.Site.DefaultMetaKeywords]" asp-validation-msg="true" />
            <mantle-input asp-for="DefaultMetaDescription" asp-label="@T[MantleWebLocalizableStrings.Settings.Site.DefaultMetaDescription]" asp-validation-msg="true" />
            <mantle-input asp-for="HomePageTitle" asp-label="@T[MantleWebLocalizableStrings.Settings.Site.HomePageTitle]" asp-validation-msg="true" />
        }
        using (var tab = tabs.BeginPanel())
        {
            @await Html.Mantle().EmbeddedPartialAsync(EmbeddedPartialType.ResourceSettings)
        }
    }
</div>

<script asp-location="None" asp-exclude-from-bundle="true" type="text/javascript">
    function updateModel(viewModel, data) {
        viewModel.siteName = ko.observable("");
        viewModel.defaultFrontendLayoutPath = ko.observable("");
        viewModel.adminLayoutPath = ko.observable("");
        viewModel.defaultGridPageSize = ko.observable(0);
        viewModel.defaultTheme = ko.observable("");
        viewModel.allowUserToSelectTheme = ko.observable(false);
        viewModel.defaultLanguage = ko.observable("");
        viewModel.defaultMetaKeywords = ko.observable("");
        viewModel.defaultMetaDescription = ko.observable("");
        viewModel.homePageTitle = ko.observable("");

        viewModel.resources = ko.observableArray([]);

        if (data) {
            if (data.SiteName) { viewModel.siteName(data.SiteName); }
            if (data.DefaultFrontendLayoutPath) { viewModel.defaultFrontendLayoutPath(data.DefaultFrontendLayoutPath); }
            if (data.AdminLayoutPath) { viewModel.adminLayoutPath(data.AdminLayoutPath); }
            if (data.DefaultGridPageSize) { viewModel.defaultGridPageSize(data.DefaultGridPageSize); }
            if (data.DefaultTheme) { viewModel.defaultTheme(data.DefaultTheme); }
            if (data.AllowUserToSelectTheme && (typeof data.AllowUserToSelectTheme === 'boolean')) { viewModel.allowUserToSelectTheme(data.AllowUserToSelectTheme); }
            if (data.DefaultLanguage) { viewModel.defaultLanguage(data.DefaultLanguage); }
            if (data.DefaultMetaKeywords) { viewModel.defaultMetaKeywords(data.DefaultMetaKeywords); }
            if (data.DefaultMetaDescription) { viewModel.defaultMetaDescription(data.DefaultMetaDescription); }
            if (data.HomePageTitle) { viewModel.homePageTitle(data.HomePageTitle); }

            if (data.Resources) {
                viewModel.setResources(data.Resources);
            }
        }
    };

    function cleanUp(viewModel) {
        delete viewModel.siteName;
        delete viewModel.defaultFrontendLayoutPath;
        delete viewModel.adminLayoutPath;
        delete viewModel.defaultGridPageSize;
        delete viewModel.defaultTheme;
        delete viewModel.allowUserToSelectTheme;
        delete viewModel.defaultLanguage;
        delete viewModel.defaultMetaKeywords;
        delete viewModel.defaultMetaDescription;
        delete viewModel.homePageTitle;
        delete viewModel.resources;
    }

    function onBeforeSave(viewModel) {
        const data = {
            SiteName: viewModel.siteName(),
            DefaultFrontendLayoutPath: viewModel.defaultFrontendLayoutPath(),
            AdminLayoutPath: viewModel.adminLayoutPath(),
            DefaultGridPageSize: viewModel.defaultGridPageSize(),
            DefaultTheme: viewModel.defaultTheme(),
            AllowUserToSelectTheme: viewModel.allowUserToSelectTheme(),
            DefaultLanguage: viewModel.defaultLanguage(),
            DefaultMetaKeywords: viewModel.defaultMetaKeywords(),
            DefaultMetaDescription: viewModel.defaultMetaDescription(),
            HomePageTitle: viewModel.homePageTitle(),
            Resources: viewModel.resources()
        };

        viewModel.value(ko.mapping.toJSON(data));
    };
</script>