@using Mantle.Web
@using Mantle.Web.Configuration
@using Mantle.Web.Mvc
@inject Microsoft.Extensions.Localization.IStringLocalizer T

@model SiteSettings

<div id="settings-content">
    <div role="tabpanel">
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation" class="active">
                <a href="#General" aria-controls="General" role="tab" data-toggle="tab">@T[MantleWebLocalizableStrings.Settings.Site.Tabs.General]</a>
            </li>
            <li role="presentation">
                <a href="#Themes" aria-controls="Themes" role="tab" data-toggle="tab">@T[MantleWebLocalizableStrings.Settings.Site.Tabs.Themes]</a>
            </li>
            <li role="presentation">
                <a href="#Localization" aria-controls="Localization" role="tab" data-toggle="tab">@T[MantleWebLocalizableStrings.Settings.Site.Tabs.Localization]</a>
            </li>
            <li role="presentation">
                <a href="#SEO" aria-controls="SEO" role="tab" data-toggle="tab">@T[MantleWebLocalizableStrings.Settings.Site.Tabs.SEO]</a>
            </li>
        </ul>
        <div class="tab-content">
            <div role="tabpanel" class="tab-pane active" id="General">
                <div class="form-group">
                    @Html.LabelFor(m => m.SiteName)
                    <input type="text" id="SiteName" name="SiteName" class="form-control" value.bind="siteName" />
                    @Html.ValidationMessageFor(m => m.SiteName)
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.DefaultFrontendLayoutPath)
                    <input type="text" id="DefaultFrontendLayoutPath" name="DefaultFrontendLayoutPath" class="form-control" value.bind="defaultFrontendLayoutPath" />
                    @Html.ValidationMessageFor(m => m.DefaultFrontendLayoutPath)
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AdminLayoutPath)
                    <input type="text" id="AdminLayoutPath" name="AdminLayoutPath" class="form-control" value.bind="adminLayoutPath" />
                    @Html.ValidationMessageFor(m => m.AdminLayoutPath)
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.DefaultGridPageSize)
                    <input type="text" id="DefaultGridPageSize" name="DefaultGridPageSize" class="form-control" value.bind="defaultGridPageSize" />
                    @Html.ValidationMessageFor(m => m.DefaultGridPageSize)
                </div>
            </div>
            <div role="tabpanel" class="tab-pane" id="Themes">
                <div class="form-group">
                    @Html.LabelFor(m => m.DefaultTheme)
                    @Html.Mantle().ThemesDropDownListFor(
                        m => m.DefaultTheme,
                        new Dictionary<string, object>
                        {
                            { "class", "form-control" },
                            { "value.bind", "defaultTheme" }
                        })
                    @Html.ValidationMessageFor(m => m.DefaultTheme)
                </div>
                <div class="checkbox">
                    <label>
                        <input type="checkbox" id="AllowUserToSelectTheme" name="AllowUserToSelectTheme" checked.bind="allowUserToSelectTheme" /> @T[MantleWebLocalizableStrings.Settings.Site.AllowUserToSelectTheme]
                    </label>
                </div>
            </div>
            <div role="tabpanel" class="tab-pane" id="Localization">
                <div class="form-group">
                    @Html.LabelFor(m => m.DefaultLanguage)
                    @Html.Mantle().LanguagesDropDownListFor(
                        m => m.DefaultLanguage,
                        new Dictionary<string, object>
                        {
                            { "class", "form-control" },
                            { "value.bind", "defaultLanguage" }
                        })
                    @Html.ValidationMessageFor(m => m.DefaultLanguage)
                </div>
            </div>
            <div role="tabpanel" class="tab-pane" id="SEO">
                <div class="form-group">
                    @Html.LabelFor(m => m.DefaultMetaKeywords)
                    <input type="text" id="DefaultMetaKeywords" name="DefaultMetaKeywords" class="form-control" value.bind="defaultMetaKeywords" />
                    @Html.ValidationMessageFor(m => m.DefaultMetaKeywords)
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.DefaultMetaDescription)
                    <input type="text" id="DefaultMetaDescription" name="DefaultMetaDescription" class="form-control" value.bind="defaultMetaDescription" />
                    @Html.ValidationMessageFor(m => m.DefaultMetaDescription)
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.HomePageTitle)
                    <input type="text" id="HomePageTitle" name="HomePageTitle" class="form-control" value.bind="homePageTitle" />
                    @Html.ValidationMessageFor(m => m.HomePageTitle)
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    function updateModel(viewModel, data) {
        viewModel.siteName = '';
        viewModel.defaultFrontendLayoutPath = '';
        viewModel.adminLayoutPath = '';
        viewModel.defaultGridPageSize = 0;
        viewModel.defaultTheme = '';
        viewModel.allowUserToSelectTheme = false;
        viewModel.defaultLanguage = '';
        viewModel.defaultMetaKeywords = '';
        viewModel.defaultMetaDescription = '';
        viewModel.homePageTitle = '';

        if (data) {
            if (data.SiteName) {
                viewModel.siteName = data.SiteName;
            }
            if (data.DefaultFrontendLayoutPath) {
                viewModel.defaultFrontendLayoutPath = data.DefaultFrontendLayoutPath;
            }
            if (data.AdminLayoutPath) {
                viewModel.adminLayoutPath = data.AdminLayoutPath;
            }
            if (data.DefaultGridPageSize) {
                viewModel.defaultGridPageSize = data.DefaultGridPageSize;
            }
            if (data.DefaultTheme) {
                viewModel.defaultTheme = data.DefaultTheme;
            }
            if (data.AllowUserToSelectTheme && (typeof data.AllowUserToSelectTheme === 'boolean')) {
                viewModel.allowUserToSelectTheme = data.AllowUserToSelectTheme;
            }
            if (data.DefaultLanguage) {
                viewModel.defaultLanguage = data.DefaultLanguage;
            }
            if (data.DefaultMetaKeywords) {
                viewModel.defaultMetaKeywords = data.DefaultMetaKeywords;
            }
            if (data.DefaultMetaDescription) {
                viewModel.defaultMetaDescription = data.DefaultMetaDescription;
            }
            if (data.HomePageTitle) {
                viewModel.homePageTitle = data.HomePageTitle;
            }
        }
    };

    function cleanUp(viewModel) {
        delete viewModel.siteName;
        delete viewModel.defaultFrontendLayoutPath;
        delete viewModel.adminLayoutPath;
        delete viewModel.defaultGridPageSize;
        delete viewModel.defaultTheme;
        delete viewModel.allowUserToSelectTheme;
        delete viewModel.defaultLanguage;
        delete viewModel.defaultMetaKeywords;
        delete viewModel.defaultMetaDescription;
        delete viewModel.homePageTitle;
    }

    function onBeforeSave(viewModel) {
        var data = {
            SiteName: viewModel.siteName,
            DefaultFrontendLayoutPath: viewModel.defaultFrontendLayoutPath,
            AdminLayoutPath: viewModel.adminLayoutPath,
            DefaultGridPageSize: viewModel.defaultGridPageSize,
            DefaultTheme: viewModel.defaultTheme,
            AllowUserToSelectTheme: viewModel.allowUserToSelectTheme,
            DefaultLanguage: viewModel.defaultLanguage,
            DefaultMetaKeywords: viewModel.defaultMetaKeywords,
            DefaultMetaDescription: viewModel.defaultMetaDescription,
            HomePageTitle: viewModel.homePageTitle
        };

        viewModel.value = JSON.stringify(data);
    };
</script>