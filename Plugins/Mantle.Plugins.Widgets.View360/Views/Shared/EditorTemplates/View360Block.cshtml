@using Extenso.AspNetCore.Mvc.ExtensoUI
@using Mantle.Plugins.Widgets.View360
@using Mantle.Web.Mvc

@model View360Block

@inject Microsoft.Extensions.Localization.IStringLocalizer T
@inject Mantle.Web.IWorkContext WorkContext

<div id="block-content">
    @using (var tabs = Html.ExtensoUI().Begin(new Tabs()))
    {
        tabs.Tab(T[LocalizableStrings.EditorTabs.General], "tab-general");
        tabs.Tab(T[LocalizableStrings.EditorTabs.MainConfiguration], "tab-main");
        tabs.Tab(T[LocalizableStrings.EditorTabs.Navigation], "tab-navigation");
        tabs.Tab(T[LocalizableStrings.EditorTabs.LoaderInfoConfig], "tab-loader-info");

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.Mode, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.DropDownListFor(m => m.Mode, Html.GetEnumSelectList<Mode>(), new { @class = "form-control", data_bind = "value: blockModel.mode" })
                    </div>
                </div>
                <mantle-input asp-for="ImagesPattern" asp-label="@T[LocalizableStrings.ImagesPattern]" ko-bind="blockModel.imagesPattern" />
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.ImagesDirectory, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.ImagesDirectory, new { @class = "form-control" })
                            @*@Html.TextBoxFor(m => m.ImagesDirectory, new { @class = "form-control", data_bind = "value: blockModel.imagesDirectory" })*@
                            <span class="input-group-addon">
                                <a data-toggle="modal" href="javascript:void(0);" data-target="#imagesDirectoryModal">
                                    <i class="fa fa-search"></i>
                                </a>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.FullSizeImagesDirectory, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.FullSizeImagesDirectory, new { @class = "form-control" })
                            @*@Html.TextBoxFor(m => m.FullSizeImagesDirectory, new { @class = "form-control", data_bind = "value: blockModel.fullSizeImagesDirectory" })*@
                            <span class="input-group-addon">
                                <a data-toggle="modal" href="javascript:void(0);" data-target="#fullSizeImagesDirectoryModal">
                                    <i class="fa fa-search"></i>
                                </a>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <mantle-input asp-for="AutoRotate" asp-label="@T[LocalizableStrings.AutoRotate]" ko-bind="blockModel.autoRotate" />
                        <mantle-input asp-for="AutoRotateStopOnMove" asp-label="@T[LocalizableStrings.AutoRotateStopOnMove]" ko-bind="blockModel.autoRotateStopOnMove" />
                        <mantle-input asp-for="LoadFullSizeImagesOnZoom" asp-label="@T[LocalizableStrings.LoadFullSizeImagesOnZoom]" ko-bind="blockModel.loadFullSizeImagesOnZoom" />
                        <mantle-input asp-for="LoadFullSizeImagesOnFullscreen" asp-label="@T[LocalizableStrings.LoadFullSizeImagesOnFullscreen]" ko-bind="blockModel.loadFullSizeImagesOnFullscreen" />
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AutoRotateDirection, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.DropDownListFor(m => m.AutoRotateDirection, Html.GetEnumSelectList<AutoRotateDirection>(), new { @class = "form-control", data_bind = "value: blockModel.autoRotateDirection" })
                    </div>
                </div>
                <mantle-input asp-for="AutoRotateSpeed" asp-label="@T[LocalizableStrings.AutoRotateSpeed]" ko-bind="blockModel.autoRotateSpeed" type="number" />
                <mantle-input asp-for="Width" asp-label="@T[LocalizableStrings.Width]" ko-bind="blockModel.width" type="number" />
                <mantle-input asp-for="Height" asp-label="@T[LocalizableStrings.Height]" ko-bind="blockModel.height" type="number" />
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <mantle-input asp-for="Rows" asp-label="@T[LocalizableStrings.Rows]" ko-bind="blockModel.rows" type="number" />
                <mantle-input asp-for="Columns" asp-label="@T[LocalizableStrings.Columns]" ko-bind="blockModel.columns" type="number" />
                <mantle-input asp-for="XAxisSensitivity" asp-label="@T[LocalizableStrings.XAxisSensitivity]" ko-bind="blockModel.xAxisSensitivity" type="number" />
                <mantle-input asp-for="YAxisSensitivity" asp-label="@T[LocalizableStrings.YAxisSensitivity]" ko-bind="blockModel.yAxisSensitivity" type="number" />
                <mantle-input asp-for="InertiaConstant" asp-label="@T[LocalizableStrings.InertiaConstant]" ko-bind="blockModel.inertiaConstant" type="number" />
            </div>
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <mantle-input asp-for="ButtonWidth" asp-label="@T[LocalizableStrings.ButtonWidth]" ko-bind="blockModel.buttonWidth" type="number" />
                <mantle-input asp-for="ButtonHeight" asp-label="@T[LocalizableStrings.ButtonHeight]" ko-bind="blockModel.buttonHeight" type="number" />
                <mantle-input asp-for="ButtonMargin" asp-label="@T[LocalizableStrings.ButtonMargin]" ko-bind="blockModel.buttonMargin" type="number" />
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <mantle-input asp-for="TurnSpeed" asp-label="@T[LocalizableStrings.TurnSpeed]" ko-bind="blockModel.turnSpeed" type="number" />
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <mantle-input asp-for="ShowButtons" asp-label="@T[LocalizableStrings.ShowButtons]" ko-bind="blockModel.showButtons" />
                        <mantle-input asp-for="ShowTool" asp-label="@T[LocalizableStrings.ShowTool]" ko-bind="blockModel.showTool" />
                        <mantle-input asp-for="ShowPlay" asp-label="@T[LocalizableStrings.ShowPlay]" ko-bind="blockModel.showPlay" />
                        <mantle-input asp-for="ShowPause" asp-label="@T[LocalizableStrings.ShowPause]" ko-bind="blockModel.showPause" />
                        <mantle-input asp-for="ShowZoom" asp-label="@T[LocalizableStrings.ShowZoom]" ko-bind="blockModel.showZoom" />
                        <mantle-input asp-for="ShowTurn" asp-label="@T[LocalizableStrings.ShowTurn]" ko-bind="blockModel.showTurn" />
                        <mantle-input asp-for="ShowFullscreen" asp-label="@T[LocalizableStrings.ShowFullscreen]" ko-bind="blockModel.showFullscreen" />
                    </div>
                </div>
            </div>
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <mantle-input asp-for="DisplayLoader" asp-label="@T[LocalizableStrings.DisplayLoader]" ko-bind="blockModel.displayLoader" />
                    </div>
                </div>
                <mantle-input asp-for="LoaderHolderClassName" asp-label="@T[LocalizableStrings.LoaderHolderClassName]" ko-bind="blockModel.loaderHolderClassName" />
                <mantle-input asp-for="LoadingTitle" asp-label="@T[LocalizableStrings.LoadingTitle]" ko-bind="blockModel.loadingTitle" />
                <mantle-input asp-for="LoadingSubtitle" asp-label="@T[LocalizableStrings.TurnSpeed]" ko-bind="blockModel.loadingSubtitle" />
                <mantle-input asp-for="LoadingMessage" asp-label="@T[LocalizableStrings.TurnSpeed]" ko-bind="blockModel.loadingMessage" />
                <mantle-input asp-for="LoaderModalBackground" asp-label="@T[LocalizableStrings.TurnSpeed]" ko-bind="blockModel.loaderModalBackground" />
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <mantle-input asp-for="LoaderModalOpacity" asp-label="@T[LocalizableStrings.LoaderModalOpacity]" ko-bind="blockModel.loaderModalOpacity" />
                <mantle-input asp-for="LoaderCircleWidth" asp-label="@T[LocalizableStrings.LoaderCircleWidth]" ko-bind="blockModel.loaderCircleWidth" />
                <mantle-input asp-for="LoaderCircleLineWidth" asp-label="@T[LocalizableStrings.LoaderCircleLineWidth]" ko-bind="blockModel.loaderCircleLineWidth" />
                <mantle-input asp-for="LoaderCircleLineColor" asp-label="@T[LocalizableStrings.LoaderCircleLineColor]" ko-bind="blockModel.loaderCircleLineColor" />
                <mantle-input asp-for="LoaderCircleBackgroundColor" asp-label="@T[LocalizableStrings.LoaderCircleBackgroundColor]" ko-bind="blockModel.loaderCircleBackgroundColor" />
            </div>
        }
    }

    <style type="text/css">
        .modal-dialog {
            width: 80% !important;
        }
    </style>

    <div class="modal fade" id="imagesDirectoryModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" onclick="dismissModal('imagesDirectoryModal');" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Select Folder</h4>
                </div>
                <div class="modal-body">
                    <iframe src="/filemanager/dialog.php?rootFolder=Tenant_@WorkContext.CurrentTenant.Id&type=2&extensions=[&quot;&quot;]&relative_url=1&fldr=&field_id=ImagesDirectory&ignore_last_position=1" frameborder="0" style="overflow:hidden;min-height:600px; height:100%;width:100%" height="100%" width="100%"></iframe>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="fullSizeImagesDirectoryModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" onclick="dismissModal('fullSizeImagesDirectoryModal');" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Select Folder</h4>
                </div>
                <div class="modal-body">
                    <iframe src="/filemanager/dialog.php?rootFolder=Tenant_@WorkContext.CurrentTenant.Id&type=2&extensions=[&quot;&quot;]&relative_url=1&fldr=&field_id=FullSizeImagesDirectory&ignore_last_position=1" frameborder="0" style="overflow:hidden;min-height:600px; height:100%;width:100%" height="100%" width="100%"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    let modalDismissed = false;

    function dismissModal(modalId) {
        modalDismissed = true;
        $('#' + modalId).modal('hide');
    }

    $(document).ready(function () {
        $('#imagesDirectoryModal').on('hidden.bs.modal', function () {
            if (!modalDismissed) {
                let url = $('#ImagesDirectory').val();
                const idx = url.indexOf("Uploads");
                url = url.substring(idx);
                //blockModel.imagesDirectory(url);
                $('#ImagesDirectory').val(url);
            }
            modalDismissed = false;
        });
        $('#fullSizeImagesDirectoryModal').on('hidden.bs.modal', function () {
            if (!modalDismissed) {
                let url = $('#FullSizeImagesDirectory').val();
                const idx = url.indexOf("Uploads");
                url = url.substring(idx);
                //blockModel.fullSizeImagesDirectory(url);
                $('#FullSizeImagesDirectory').val(url);
            }
            modalDismissed = false;
        });
    });

    const contentBlockModel = (function () {
        const f = {};
        f.internalModel = false;
        f.updateModel = function (blockModel) {
            internalModel = blockModel;
            blockModel.mode = 0;
            blockModel.imagesPattern = "image-%COL-%ROW.jpg";
            //blockModel.imagesDirectory = '';
            //blockModel.fullSizeImagesDirectory = '';
            blockModel.autoRotate = false;
            blockModel.autoRotateDirection = 1;
            blockModel.autoRotateSpeed = 50;
            blockModel.autoRotateStopOnMove = true;
            blockModel.loadFullSizeImagesOnZoom = true;
            blockModel.loadFullSizeImagesOnFullscreen = true;
            blockModel.width = 620;
            blockModel.height = 350;
            blockModel.rows = 1;
            blockModel.columns = 36;
            blockModel.xAxisSensitivity = 10;
            blockModel.yAxisSensitivity = 40;
            blockModel.inertiaConstant = 10;
            blockModel.buttonWidth = 40;
            blockModel.buttonHeight = 40;
            blockModel.buttonMargin = 5;
            blockModel.turnSpeed = 40;
            blockModel.showButtons = true;
            blockModel.showTool = true;
            blockModel.showPlay = true;
            blockModel.showPause = true;
            blockModel.showZoom = true;
            blockModel.showTurn = true;
            blockModel.showFullscreen = true;
            blockModel.displayLoader = true;
            blockModel.loaderHolderClassName = '';
            blockModel.loadingTitle = '';
            blockModel.loadingSubtitle = '';
            blockModel.loadingMessage = '';
            blockModel.loaderModalBackground = "#FFF";
            blockModel.loaderModalOpacity = 0.5;
            blockModel.loaderCircleWidth = 70;
            blockModel.loaderCircleLineWidth = 10;
            blockModel.loaderCircleLineColor = "#555";
            blockModel.loaderCircleBackgroundColor = "#FFF";

            const data = JSON.parse(blockModel.blockValues);

            if ((isFunction(data) && data()) || data) {
                if (data.Mode == undefined) {
                    // If this is not set, it means the contentBlock is new and we have nothing in blockValues
                    return;
                }
                blockModel.mode = data.Mode;
                blockModel.imagesPattern = data.ImagesPattern;

                $('#ImagesDirectory').val(data.ImagesDirectory);
                $('#FullSizeImagesDirectory').val(data.FullSizeImagesDirectory);

                //blockModel.imagesDirectory = data.ImagesDirectory;
                //blockModel.fullSizeImagesDirectory = data.FullSizeImagesDirectory;
                blockModel.autoRotate = data.AutoRotate;
                blockModel.autoRotateDirection = data.AutoRotateDirection;
                blockModel.autoRotateSpeed = data.AutoRotateSpeed;
                blockModel.autoRotateStopOnMove = data.AutoRotateStopOnMove;
                blockModel.loadFullSizeImagesOnZoom = data.LoadFullSizeImagesOnZoom;
                blockModel.loadFullSizeImagesOnFullscreen = data.LoadFullSizeImagesOnFullscreen;
                blockModel.width = data.Width;
                blockModel.height = data.Height;
                blockModel.rows = data.Rows;
                blockModel.columns = data.Columns;
                blockModel.xAxisSensitivity = data.XAxisSensitivity;
                blockModel.yAxisSensitivity = data.YAxisSensitivity;
                blockModel.inertiaConstant = data.InertiaConstant;
                blockModel.buttonWidth = data.ButtonWidth;
                blockModel.buttonHeight = data.ButtonHeight;
                blockModel.buttonMargin = data.ButtonMargin;
                blockModel.turnSpeed = data.TurnSpeed;
                blockModel.showButtons = data.ShowButtons;
                blockModel.showTool = data.ShowTool;
                blockModel.showPlay = data.ShowPlay;
                blockModel.showPause = data.ShowPause;
                blockModel.showZoom = data.ShowZoom;
                blockModel.showTurn = data.ShowTurn;
                blockModel.showFullscreen = data.ShowFullscreen;
                blockModel.displayLoader = data.DisplayLoader;
                blockModel.loaderHolderClassName = data.LoaderHolderClassName;
                blockModel.loadingTitle = data.LoadingTitle;
                blockModel.loadingSubtitle = data.LoadingSubtitle;
                blockModel.loadingMessage = data.LoadingMessage;
                blockModel.loaderModalBackground = data.LoaderModalBackground;
                blockModel.loaderModalOpacity = data.LoaderModalOpacity;
                blockModel.loaderCircleWidth = data.LoaderCircleWidth;
                blockModel.loaderCircleLineWidth = data.LoaderCircleLineWidth;
                blockModel.loaderCircleLineColor = data.LoaderCircleLineColor;
                blockModel.loaderCircleBackgroundColor = data.LoaderCircleBackgroundColor;
            }
        };
        f.cleanUp = function (blockModel) {
            delete blockModel.mode;
            delete blockModel.imagesPattern;
            //delete blockModel.imagesDirectory;
            //delete blockModel.fullSizeImagesDirectory;
            delete blockModel.autoRotate;
            delete blockModel.autoRotateDirection;
            delete blockModel.autoRotateSpeed;
            delete blockModel.autoRotateStopOnMove;
            delete blockModel.loadFullSizeImagesOnZoom;
            delete blockModel.loadFullSizeImagesOnFullscreen;
            delete blockModel.width;
            delete blockModel.height;
            delete blockModel.rows;
            delete blockModel.columns;
            delete blockModel.xAxisSensitivity;
            delete blockModel.yAxisSensitivity;
            delete blockModel.inertiaConstant;
            delete blockModel.buttonWidth;
            delete blockModel.buttonHeight;
            delete blockModel.buttonMargin;
            delete blockModel.turnSpeed;
            delete blockModel.showButtons;
            delete blockModel.showTool;
            delete blockModel.showPlay;
            delete blockModel.showPause;
            delete blockModel.showZoom;
            delete blockModel.showTurn;
            delete blockModel.showFullscreen;
            delete blockModel.displayLoader;
            delete blockModel.loaderHolderClassName;
            delete blockModel.loadingTitle;
            delete blockModel.loadingSubtitle;
            delete blockModel.loadingMessage;
            delete blockModel.loaderModalBackground;
            delete blockModel.loaderModalOpacity;
            delete blockModel.loaderCircleWidth;
            delete blockModel.loaderCircleLineWidth;
            delete blockModel.loaderCircleLineColor;
            delete blockModel.loaderCircleBackgroundColor;
        };
        f.onBeforeSave = function (blockModel) {
            const data = {
                Mode: blockModel.mode,
                ImagesPattern: blockModel.imagesPattern,
                ImagesDirectory: $('#ImagesDirectory').val(),
                FullSizeImagesDirectory: $('#FullSizeImagesDirectory').val(),
                //ImagesDirectory: blockModel.imagesDirectory,
                //FullSizeImagesDirectory: blockModel.fullSizeImagesDirectory,
                AutoRotate: blockModel.autoRotate,
                AutoRotateDirection: blockModel.autoRotateDirection,
                AutoRotateSpeed: blockModel.autoRotateSpeed,
                AutoRotateStopOnMove: blockModel.autoRotateStopOnMove,
                LoadFullSizeImagesOnZoom: blockModel.loadFullSizeImagesOnZoom,
                LoadFullSizeImagesOnFullscreen: blockModel.loadFullSizeImagesOnFullscreen,
                Width: blockModel.width,
                Height: blockModel.height,
                Rows: blockModel.rows,
                Columns: blockModel.columns,
                XAxisSensitivity: blockModel.xAxisSensitivity,
                YAxisSensitivity: blockModel.yAxisSensitivity,
                InertiaConstant: blockModel.inertiaConstant,
                ButtonWidth: blockModel.buttonWidth,
                ButtonHeight: blockModel.buttonHeight,
                ButtonMargin: blockModel.buttonMargin,
                TurnSpeed: blockModel.turnSpeed,
                ShowButtons: blockModel.showButtons,
                ShowTool: blockModel.showTool,
                ShowPlay: blockModel.showPlay,
                ShowPause: blockModel.showPause,
                ShowZoom: blockModel.showZoom,
                ShowTurn: blockModel.showTurn,
                ShowFullscreen: blockModel.showFullscreen,
                DisplayLoader: blockModel.displayLoader,
                LoaderHolderClassName: blockModel.loaderHolderClassName,
                LoadingTitle: blockModel.loadingTitle,
                LoadingSubtitle: blockModel.loadingSubtitle,
                LoadingMessage: blockModel.loadingMessage,
                LoaderModalBackground: blockModel.loaderModalBackground,
                LoaderModalOpacity: blockModel.loaderModalOpacity,
                LoaderCircleWidth: blockModel.loaderCircleWidth,
                LoaderCircleLineWidth: blockModel.loaderCircleLineWidth,
                LoaderCircleLineColor: blockModel.loaderCircleLineColor,
                LoaderCircleBackgroundColor: blockModel.loaderCircleBackgroundColor
            };

            blockModel.blockValues = JSON.stringify(data);
        };
        return f;
    })();
</script>