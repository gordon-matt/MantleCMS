@using Extenso
@using Mantle.Infrastructure
@using Mantle.Plugins.Widgets.FullCalendar
@using Mantle.Plugins.Widgets.FullCalendar.Services
@using Mantle.Web
@using Mantle.Web.Configuration
@using Mantle.Web.Mvc
@model Mantle.Plugins.Widgets.FullCalendar.ContentBlocks.FullCalendarBlock
@addTagHelper *, Mantle.Web

@inject Mantle.Web.IWorkContext WorkContext
@inject FullCalendarPluginSettings Settings
@inject ICalendarEventService eventService

@{
    string lang = WorkContext.CurrentCultureCode.LeftOf('-');
    
    var events = eventService.Find(x => x.CalendarId == Model.CalendarId);
    string json = events.Select(x => new
    {
        title = x.Name,
        start = x.StartDateTime,
        end = x.EndDateTime
    }).JsonSerialize();
    string blockId = "calendar-" + Guid.NewGuid();

    foreach (var script in Settings.GetResources(ResourceType.Script, "FullCalendar"))
    {
        <script asp-location="Foot" src="@script.Path"></script>
    }

    //if (!string.IsNullOrEmpty(lang) && lang != "en") // TODO: How to properly handle these conditional ones??
    //{
    //    <script asp-location="Foot" type="text/javascript" src="/Plugins/Widgets.FullCalendar/wwwroot/js/fullcalendar-2.3.1/lang/@(lang).js"></script>
    //}

    foreach (var style in Settings.GetResources(ResourceType.Stylesheet, "FullCalendar"))
    {
        <link rel="stylesheet" href="@style.Path" />
    }
}

<div id="@blockId"></div>

<script asp-location="Foot" type="text/javascript">
    $('#@blockId').fullCalendar({
        header: {
            left: 'prev,next today',
            center: 'title',
            right: 'month,agendaWeek,agendaDay'
        },
        isRTL: @System.Globalization.CultureInfo.CurrentCulture.TextInfo.IsRightToLeft.ToString().ToLowerInvariant(),
        @if (Model.FirstDay != DayOfWeek.Sunday)
        {
            @:firstDay: @((int)Model.FirstDay),
        }

        theme: @Model.Theme.ToString().ToLowerInvariant(),
        weekends: @Model.Weekends.ToString().ToLowerInvariant(),
        fixedWeekCount: @Model.FixedWeekCount.ToString().ToLowerInvariant(),
        weekNumbers: @Model.WeekNumbers.ToString().ToLowerInvariant(),
        @if (Model.AspectRatio != 1.35f)
        {
            @:aspectRatio: @Model.AspectRatio,
        }

        handleWindowResize: @Model.HandleWindowResize.ToString().ToLowerInvariant(),

        allDaySlot: @Model.AllDaySlot.ToString().ToLowerInvariant(),
        @if (!string.IsNullOrEmpty(Model.AllDayText))
        {
            @:allDayText: '@Model.AllDayText',
        }

        @if (Model.SlotDuration != "00:30:00")
        {
            @:slotDuration: '@Model.SlotDuration',
        }

        @if (Model.ScrollTime != "06:00:00")
        {
            @:scrollTime: '@Model.ScrollTime',
        }

        @if (Model.MinTime != "00:00:00")
        {
            @:minTime: '@Model.MinTime',
        }

        @if (Model.MaxTime != "24:00:00")
        {
            @:maxTime: '@Model.MaxTime',
        }

        slotEventOverlap: @Model.SlotEventOverlap.ToString().ToLowerInvariant(),

        selectable: @Model.Selectable.ToString().ToLowerInvariant(),
        unselectAuto: @Model.UnselectAuto.ToString().ToLowerInvariant(),
        selectOverlap: @Model.SelectOverlap.ToString().ToLowerInvariant(),
        @if (!string.IsNullOrEmpty(Model.EventColor))
        {
            @:eventColor: '@Model.EventColor',
        }

        @if (!string.IsNullOrEmpty(Model.EventBackgroundColor))
        {
            @:eventBackgroundColor: '@Model.EventBackgroundColor',
        }

        @if (!string.IsNullOrEmpty(Model.EventBorderColor))
        {
            @:eventBorderColor: '@Model.EventBorderColor',
        }

        @if (!string.IsNullOrEmpty(Model.EventTextColor))
        {
            @:eventTextColor: '@Model.EventTextColor',
        }

        @if (Model.NextDayThreshold != "09:00:00")
        {
            @:nextDayThreshold: '@Model.NextDayThreshold',
        }

        events: @Html.Raw(json)
    });
</script>