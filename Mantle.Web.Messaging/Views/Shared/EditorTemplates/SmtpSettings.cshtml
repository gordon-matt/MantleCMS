@model SmtpSettings

<div id="settings-content">
    <mantle-input asp-for="DisplayName" asp-label="@T[LocalizableStrings.Settings.Smtp.DisplayName]" asp-validation-msg="true" />
    <mantle-input asp-for="Host" asp-label="@T[LocalizableStrings.Settings.Smtp.Host]" asp-validation-msg="true" />
    <mantle-input asp-for="Port" asp-label="@T[LocalizableStrings.Settings.Smtp.Port]" asp-validation-msg="true" />
    <mantle-input asp-for="EnableSsl" asp-label="@T[LocalizableStrings.Settings.Smtp.EnableSsl]" />
    <mantle-input asp-for="UseDefaultCredentials" asp-label="@T[LocalizableStrings.Settings.Smtp.UseDefaultCredentials]" />
    <mantle-input asp-for="Username" asp-label="@T[LocalizableStrings.Settings.Smtp.Username]" asp-validation-msg="true" />
    <mantle-input asp-for="Password" asp-label="@T[LocalizableStrings.Settings.Smtp.Password]" asp-validation-msg="true" />
    <mantle-input asp-for="MaxTries" asp-label="@T[LocalizableStrings.Settings.Smtp.MaxTries]" asp-validation-msg="true" type="number" />
    <mantle-input asp-for="MessagesPerBatch" asp-label="@T[LocalizableStrings.Settings.Smtp.MessagesPerBatch]" asp-validation-msg="true" type="number" />
</div>

<script asp-location="None" asp-exclude-from-bundle="true" type="text/javascript">
    function updateModel(viewModel, data) {
        viewModel.displayName = ko.observable("");
        viewModel.host = ko.observable("");
        viewModel.port = ko.observable(0);
        viewModel.enableSsl = ko.observable(false);
        viewModel.useDefaultCredentials = ko.observable(false);
        viewModel.username = ko.observable("");
        viewModel.password = ko.observable("");
        viewModel.maxTries = ko.observable(0);
        viewModel.messagesPerBatch = ko.observable(0);

        if (data) {
            if (data.DisplayName) { viewModel.displayName(data.DisplayName); }
            if (data.Host) { viewModel.host(data.Host); }
            if (data.Port) { viewModel.port(data.Port); }
            if (data.EnableSsl && typeof data.EnableSsl === 'boolean') { viewModel.enableSsl(data.EnableSsl); }
            if (data.UseDefaultCredentials && typeof data.UseDefaultCredentials === 'boolean') { viewModel.useDefaultCredentials(data.UseDefaultCredentials); }
            if (data.Username) { viewModel.username(data.Username); }
            if (data.Password) { viewModel.password(data.Password); }
            if (data.MaxTries) { viewModel.maxTries(data.MaxTries); }
            if (data.MessagesPerBatch) { viewModel.messagesPerBatch(data.MessagesPerBatch); }
        }
    };

    function cleanUp(viewModel) {
        delete viewModel.displayName;
        delete viewModel.host;
        delete viewModel.port;
        delete viewModel.enableSsl;
        delete viewModel.useDefaultCredentials;
        delete viewModel.username;
        delete viewModel.password;
        delete viewModel.maxTries;
        delete viewModel.messagesPerBatch;
    }

    function onBeforeSave(viewModel) {
        const data = {
            DisplayName: viewModel.displayName(),
            Host: viewModel.host(),
            Port: viewModel.port(),
            EnableSsl: viewModel.enableSsl(),
            UseDefaultCredentials: viewModel.useDefaultCredentials(),
            Username: viewModel.username(),
            Password: viewModel.password(),
            MaxTries: viewModel.maxTries(),
            MessagesPerBatch: viewModel.messagesPerBatch()
        };

        viewModel.value(ko.mapping.toJSON(data));
    };
</script>