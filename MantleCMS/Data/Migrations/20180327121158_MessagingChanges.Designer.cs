// <auto-generated />
using Mantle.Web.Common.Areas.Admin.Regions.Domain;
using Mantle.Web.ContentManagement.Areas.Admin.Pages.Domain;
using Mantle.Web.ContentManagement.Areas.Admin.Sitemap.Domain;
using MantleCMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MantleCMS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180327121158_MessagingChanges")]
    partial class MessagingChanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mantle.Configuration.Domain.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Mantle_Settings");
                });

            modelBuilder.Entity("Mantle.Localization.Domain.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CultureCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool>("IsEnabled");

                    b.Property<bool>("IsRTL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int>("SortOrder");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Mantle_Languages");
                });

            modelBuilder.Entity("Mantle.Localization.Domain.LocalizableProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CultureCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Mantle_LocalizableProperties");
                });

            modelBuilder.Entity("Mantle.Localization.Domain.LocalizableString", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CultureCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("TenantId");

                    b.Property<string>("TextKey")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("TextValue")
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Mantle_LocalizableStrings");
                });

            modelBuilder.Entity("Mantle.Logging.Domain.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ErrorClass")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("ErrorMessage")
                        .IsUnicode(true);

                    b.Property<string>("ErrorMethod")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ErrorSource")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<DateTime>("EventDateTime");

                    b.Property<string>("EventLevel")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("EventMessage")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("InnerErrorMessage")
                        .IsUnicode(true);

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Mantle_Log");
                });

            modelBuilder.Entity("Mantle.Messaging.Data.Domain.MessageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<Guid?>("OwnerId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Mantle_MessageTemplates");
                });

            modelBuilder.Entity("Mantle.Messaging.Data.Domain.MessageTemplateVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CultureCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Data")
                        .IsUnicode(true);

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<DateTime>("DateModifiedUtc");

                    b.Property<int>("MessageTemplateId");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("MessageTemplateId");

                    b.ToTable("Mantle_MessageTemplateVersions");
                });

            modelBuilder.Entity("Mantle.Messaging.Data.Domain.QueuedEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("FromAddress")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FromName")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("MailMessage")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<int>("Priority");

                    b.Property<DateTime?>("SentOnUtc");

                    b.Property<int>("SentTries");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int?>("TenantId");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("ToName")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Mantle_QueuedEmails");
                });

            modelBuilder.Entity("Mantle.Plugins.Messaging.Forums.Data.Domain.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("Description")
                        .IsUnicode(true);

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("ForumGroupId");

                    b.Property<int>("LastPostId");

                    b.Property<DateTime?>("LastPostTime");

                    b.Property<string>("LastPostUserId")
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.Property<int>("LastTopicId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int>("NumPosts");

                    b.Property<int>("NumTopics");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.HasKey("Id");

                    b.HasIndex("ForumGroupId");

                    b.ToTable("Mantle_Plugins_Forums_Forums");
                });

            modelBuilder.Entity("Mantle.Plugins.Messaging.Forums.Data.Domain.ForumGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int?>("TenantId");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.HasKey("Id");

                    b.ToTable("Mantle_Plugins_Forums_Groups");
                });

            modelBuilder.Entity("Mantle.Plugins.Messaging.Forums.Data.Domain.ForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Text")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<int>("TopicId");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Mantle_Plugins_Forums_Posts");
                });

            modelBuilder.Entity("Mantle.Plugins.Messaging.Forums.Data.Domain.ForumSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("ForumId");

                    b.Property<int>("TopicId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Mantle_Plugins_Forums_Subscriptions");
                });

            modelBuilder.Entity("Mantle.Plugins.Messaging.Forums.Data.Domain.ForumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("ForumId");

                    b.Property<int>("LastPostId");

                    b.Property<DateTime?>("LastPostTime");

                    b.Property<string>("LastPostUserId")
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.Property<int>("NumPosts");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(true);

                    b.Property<byte>("TopicType");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.Property<int>("Views");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.ToTable("Mantle_Plugins_Forums_Topics");
                });

            modelBuilder.Entity("Mantle.Plugins.Messaging.Forums.Data.Domain.PrivateMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("FromUserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeletedByAuthor");

                    b.Property<bool>("IsDeletedByRecipient");

                    b.Property<bool>("IsRead");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(true);

                    b.Property<string>("Text")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("ToUserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Mantle_Plugins_Forums_PrivateMessages");
                });

            modelBuilder.Entity("Mantle.Tasks.Domain.ScheduledTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Enabled");

                    b.Property<DateTime?>("LastEndUtc");

                    b.Property<DateTime?>("LastStartUtc");

                    b.Property<DateTime?>("LastSuccessUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int>("Seconds");

                    b.Property<bool>("StopOnError");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Mantle_ScheduledTasks");
                });

            modelBuilder.Entity("Mantle.Tenants.Domain.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Hosts")
                        .HasMaxLength(1024)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Mantle_Tenants");
                });

            modelBuilder.Entity("Mantle.Web.Common.Areas.Admin.Regions.Domain.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<bool>("HasStates");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<short?>("Order");

                    b.Property<int?>("ParentId");

                    b.Property<byte>("RegionType");

                    b.Property<string>("StateCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Mantle_Common_Regions");
                });

            modelBuilder.Entity("Mantle.Web.Common.Areas.Admin.Regions.Domain.RegionSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Fields")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<int>("RegionId");

                    b.Property<string>("SettingsId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Mantle_Common_RegionSettings");
                });

            modelBuilder.Entity("Mantle.Web.Configuration.Domain.GenericAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Mantle_GenericAttributes");
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.Blog.Domain.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Mantle_BlogCategories");
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.Blog.Domain.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<string>("ExternalLink")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FullDescription")
                        .IsUnicode(true);

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.Property<string>("TeaserImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int?>("TenantId");

                    b.Property<bool>("UseExternalLink");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Mantle_BlogPosts");
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.Blog.Domain.BlogPostTag", b =>
                {
                    b.Property<Guid>("PostId");

                    b.Property<int>("TagId");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("Mantle_BlogPostTags");
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.Blog.Domain.BlogTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Mantle_BlogTags");
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.ContentBlocks.Domain.ContentBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("BlockType")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<string>("BlockValues")
                        .IsUnicode(true);

                    b.Property<string>("CustomTemplatePath")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("DisplayCondition")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<bool>("IsEnabled");

                    b.Property<int>("Order");

                    b.Property<Guid?>("PageId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<Guid>("ZoneId");

                    b.HasKey("Id");

                    b.ToTable("Mantle_ContentBlocks");
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.ContentBlocks.Domain.EntityTypeContentBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("BlockType")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<string>("BlockValues")
                        .IsUnicode(true);

                    b.Property<string>("CustomTemplatePath")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<bool>("IsEnabled");

                    b.Property<int>("Order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<Guid>("ZoneId");

                    b.HasKey("Id");

                    b.ToTable("Mantle_EntityTypeContentBlocks");
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.ContentBlocks.Domain.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Mantle_Zones");
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.Menus.Domain.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UrlFilter")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Mantle_Menus");
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.Menus.Domain.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CssClass")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<bool>("Enabled");

                    b.Property<bool>("IsExternalUrl");

                    b.Property<Guid>("MenuId");

                    b.Property<Guid?>("ParentId");

                    b.Property<int>("Position");

                    b.Property<Guid?>("RefId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Mantle_MenuItems");
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.Pages.Domain.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessRestrictions")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int>("Order");

                    b.Property<Guid>("PageTypeId");

                    b.Property<Guid?>("ParentId");

                    b.Property<bool>("ShowOnMenus");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Mantle_Pages");
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.Pages.Domain.PageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LayoutPath")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Mantle_PageTypes");
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.Pages.Domain.PageVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CultureCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<DateTime>("DateModifiedUtc");

                    b.Property<string>("Fields")
                        .IsUnicode(true);

                    b.Property<Guid>("PageId");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<byte>("Status");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("Mantle_PageVersions");
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.Sitemap.Domain.SitemapConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("ChangeFrequency");

                    b.Property<Guid>("PageId");

                    b.Property<float>("Priority");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Mantle_SitemapConfig");
                });

            modelBuilder.Entity("MantleCMS.Data.Domain.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MantleCMS.Data.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ApplicationRoleId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("TenantId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MantleCMS.Data.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("MantleCMS.Data.Domain.RolePermission", b =>
                {
                    b.Property<int>("PermissionId");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("MantleCMS.Data.Domain.UserProfileEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .IsRequired()
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Mantle.Messaging.Data.Domain.MessageTemplateVersion", b =>
                {
                    b.HasOne("Mantle.Messaging.Data.Domain.MessageTemplate", "MessageTemplate")
                        .WithMany()
                        .HasForeignKey("MessageTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mantle.Plugins.Messaging.Forums.Data.Domain.Forum", b =>
                {
                    b.HasOne("Mantle.Plugins.Messaging.Forums.Data.Domain.ForumGroup", "ForumGroup")
                        .WithMany("Forums")
                        .HasForeignKey("ForumGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mantle.Plugins.Messaging.Forums.Data.Domain.ForumPost", b =>
                {
                    b.HasOne("Mantle.Plugins.Messaging.Forums.Data.Domain.ForumTopic", "ForumTopic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mantle.Plugins.Messaging.Forums.Data.Domain.ForumTopic", b =>
                {
                    b.HasOne("Mantle.Plugins.Messaging.Forums.Data.Domain.Forum", "Forum")
                        .WithMany()
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mantle.Web.Common.Areas.Admin.Regions.Domain.Region", b =>
                {
                    b.HasOne("Mantle.Web.Common.Areas.Admin.Regions.Domain.Region", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.Blog.Domain.BlogPost", b =>
                {
                    b.HasOne("Mantle.Web.ContentManagement.Areas.Admin.Blog.Domain.BlogCategory", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.Blog.Domain.BlogPostTag", b =>
                {
                    b.HasOne("Mantle.Web.ContentManagement.Areas.Admin.Blog.Domain.BlogPost", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mantle.Web.ContentManagement.Areas.Admin.Blog.Domain.BlogTag", "Tag")
                        .WithMany("Posts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mantle.Web.ContentManagement.Areas.Admin.Pages.Domain.PageVersion", b =>
                {
                    b.HasOne("Mantle.Web.ContentManagement.Areas.Admin.Pages.Domain.Page", "Page")
                        .WithMany("Versions")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MantleCMS.Data.Domain.ApplicationUser", b =>
                {
                    b.HasOne("MantleCMS.Data.Domain.ApplicationRole")
                        .WithMany("Users")
                        .HasForeignKey("ApplicationRoleId");
                });

            modelBuilder.Entity("MantleCMS.Data.Domain.RolePermission", b =>
                {
                    b.HasOne("MantleCMS.Data.Domain.Permission", "Permission")
                        .WithMany("RolesPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MantleCMS.Data.Domain.ApplicationRole", "Role")
                        .WithMany("RolesPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MantleCMS.Data.Domain.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MantleCMS.Data.Domain.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MantleCMS.Data.Domain.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MantleCMS.Data.Domain.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MantleCMS.Data.Domain.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MantleCMS.Data.Domain.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
