@using Mantle.Web.ContentManagement
@model Mantle.Web.ContentManagement.Areas.Admin.Pages.StandardPage

@inject Microsoft.Extensions.Localization.IStringLocalizer T

<div id="fields-content">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="form-group">
            @Html.Label("MetaTitle", T[MantleCmsLocalizableStrings.Pages.PageTypes.StandardPage.MetaTitle], new { @class = "control-label" })
            <input type="text" id="MetaTitle" name="MetaTitle" class="form-control" value.bind="pageVersionModel.metaTitle" />
        </div>
    </div>
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="form-group">
            @Html.Label("MetaKeywords", T[MantleCmsLocalizableStrings.Pages.PageTypes.StandardPage.MetaKeywords], new { @class = "control-label" })
            <input type="text" id="MetaKeywords" name="MetaKeywords" class="form-control" value.bind="pageVersionModel.metaKeywords" />
        </div>
    </div>
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="form-group">
            @Html.Label("MetaDescription", T[MantleCmsLocalizableStrings.Pages.PageTypes.StandardPage.MetaDescription], new { @class = "control-label" })
            <input type="text" id="MetaDescription" name="MetaDescription" class="form-control" value.bind="pageVersionModel.metaDescription" />
        </div>
    </div>
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="form-group">
            @Html.Label("BodyContent", T[MantleCmsLocalizableStrings.Pages.PageTypes.StandardPage.BodyContent], new { @class = "control-label" })
            <tiny-mce theme="silver" content.two-way="pageVersionModel.bodyContent" options.bind="pageVersionModel.tinyMCEOptions"></tiny-mce>
        </div>
    </div>
</div>

<script type="text/javascript">
    var pageModel = (function () {
        var f = {};
        f.updateModel = function (pageVersionModel) {
            pageVersionModel.metaTitle = '';
            pageVersionModel.metaKeywords = '';
            pageVersionModel.metaDescription = '';
            pageVersionModel.bodyContent = '';

            var data = JSON.parse(pageVersionModel.fields);

            if (data) {
                if (data.MetaTitle) {
                    pageVersionModel.metaTitle = data.MetaTitle;
                }
                if (data.MetaKeywords) {
                    pageVersionModel.metaKeywords = data.MetaKeywords;
                }
                if (data.MetaDescription) {
                    pageVersionModel.metaDescription = data.MetaDescription;
                }
                if (data.BodyContent) {
                    pageVersionModel.bodyContent = data.BodyContent;
                }
            }

            // TODO: Find a better solution
            pageVersionModel.tinyMCEOptions = pageVersionModel.parent.mantleAdvancedTinyMCEConfig;
        };
        f.cleanUp = function (pageVersionModel) {
            delete pageVersionModel.metaTitle;
            delete pageVersionModel.metaKeywords;
            delete pageVersionModel.metaDescription;
            delete pageVersionModel.bodyContent;
            delete pageVersionModel.tinyMCEOptions;
        };
        f.onBeforeSave = function (pageVersionModel) {
            var data = {
                MetaTitle: pageVersionModel.metaTitle,
                MetaKeywords: pageVersionModel.metaKeywords,
                MetaDescription: pageVersionModel.metaDescription,
                BodyContent: pageVersionModel.bodyContent
            };
            pageVersionModel.fields = JSON.stringify(data);
        };
        return f;
    })();
</script>