@using Mantle.Web.ContentManagement
@using Mantle.Web.ContentManagement.Areas.Admin.Blog
@using Mantle.Web.Mvc

@model BlogSettings

@inject Microsoft.Extensions.Localization.IStringLocalizer T

<div id="settings-content">
    <div class="form-group">
        @Html.LabelFor(m => m.PageTitle, new { @class = "control-label" })
        <input type="text" id="PageTitle" name="PageTitle" class="form-control" value.bind="pageTitle" />
        @Html.ValidationMessageFor(m => m.PageTitle)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.DateFormat, new { @class = "control-label" })
        <input type="text" id="DateFormat" name="DateFormat" class="form-control" value.bind="dateFormat" />
        @Html.ValidationMessageFor(m => m.DateFormat)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ItemsPerPage, new { @class = "control-label" })
        <input type="text" id="ItemsPerPage" name="ItemsPerPage" class="form-control" value.bind="itemsPerPage" />
        @Html.ValidationMessageFor(m => m.ItemsPerPage)
    </div>
    <div class="form-group">
        <div class="checkbox">
            <label>
                <input type="checkbox" id="ShowOnMenus" name="ShowOnMenus" checked.bind="showOnMenus" /> @T[MantleCmsLocalizableStrings.Settings.Blog.ShowOnMenus]
            </label>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.MenuPosition, new { @class = "control-label" })
        <input type="text" id="MenuPosition" name="MenuPosition" class="form-control" value.bind="menuPosition" />
        @Html.ValidationMessageFor(m => m.MenuPosition)
    </div>
    <div class="form-group">
        <div class="checkbox">
            <label>
                <input type="checkbox" id="UseAjax" name="UseAjax" checked.bind="useAjax" /> @T[MantleCmsLocalizableStrings.Settings.Blog.UseAjax]
            </label>
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Roles", "Roles", new { @class = "control-label" })
        @Html.Mantle().RolesCheckBoxList(
            "Roles",
            null,
            new { @class = "checkbox" },
            new Dictionary<string, object>
            {
                { "checked.bind", "roles" }
            })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.LayoutPathOverride, new { @class = "control-label" })
        <input type="text" id="LayoutPathOverride" name="LayoutPathOverride" class="form-control" value.bind="layoutPathOverride" />
        @Html.ValidationMessageFor(m => m.LayoutPathOverride)
    </div>
</div>

<script type="text/javascript">
    function updateModel(viewModel, data) {
        viewModel.pageTitle = 'Blog';
        viewModel.dateFormat = 'YYYY-MM-DD HH:mm:ss';
        viewModel.itemsPerPage = 5;
        viewModel.showOnMenus = true;
        viewModel.menuPosition = 0;
        viewModel.useAjax = false;
        viewModel.layoutPathOverride = null;

        viewModel.accessRestrictions = null;
        viewModel.roles = [];

        if (data) {
            if (data.PageTitle) {
                viewModel.pageTitle = data.PageTitle;
            }
            if (data.DateFormat) {
                viewModel.dateFormat = data.DateFormat;
            }
            if (data.ItemsPerPage) {
                viewModel.itemsPerPage = data.ItemsPerPage;
            }
            if (data.ShowOnMenus && typeof data.ShowOnMenus === 'boolean') {
                viewModel.showOnMenus = data.ShowOnMenus;
            }
            if (data.MenuPosition) {
                viewModel.menuPosition = data.MenuPosition;
            }
            if (data.UseAjax && typeof data.UseAjax === 'boolean') {
                viewModel.useAjax = data.UseAjax;
            }
            if (data.AccessRestrictions) {
                viewModel.accessRestrictions = JSON.parse(data.AccessRestrictions);

                if (viewModel.accessRestrictions.Roles) {
                    var split = viewModel.accessRestrictions.Roles.split(',');
                    viewModel.roles = split;
                }
            }
            if (data.LayoutPathOverride) {
                viewModel.layoutPathOverride = data.LayoutPathOverride;
            }
        }
    };

    function cleanUp(viewModel) {
        delete viewModel.pageTitle;
        delete viewModel.dateFormat;
        delete viewModel.itemsPerPage;
        delete viewModel.showOnMenus;
        delete viewModel.menuPosition;
        delete viewModel.useAjax;
        delete viewModel.accessRestrictions;
        delete viewModel.roles;
        delete viewModel.layoutPathOverride;
    }

    function onBeforeSave(viewModel) {
        var data = {
            PageTitle: viewModel.pageTitle,
            DateFormat: viewModel.dateFormat,
            ItemsPerPage: viewModel.itemsPerPage,
            ShowOnMenus: viewModel.showOnMenus,
            MenuPosition: viewModel.menuPosition,
            UseAjax: viewModel.useAjax,
            AccessRestrictions: JSON.stringify({
                Roles: viewModel.roles.join()
            }),
            LayoutPathOverride: viewModel.layoutPathOverride
        };
    
        viewModel.value = JSON.stringify(data);
    };
</script>