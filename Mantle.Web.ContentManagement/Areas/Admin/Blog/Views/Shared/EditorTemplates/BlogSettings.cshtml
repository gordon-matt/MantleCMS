@model BlogSettings

<div id="settings-content">
    <mantle-input asp-for="PageTitle" asp-label="@T[MantleCmsLocalizableStrings.Settings.Blog.PageTitle]" asp-validation-msg="true" />
    <mantle-input asp-for="DateFormat" asp-label="@T[MantleCmsLocalizableStrings.Settings.Blog.DateFormat]" asp-validation-msg="true" />
    <mantle-input asp-for="ItemsPerPage" asp-label="@T[MantleCmsLocalizableStrings.Settings.Blog.ItemsPerPage]" asp-validation-msg="true" type="number" />
    <mantle-input asp-for="ShowOnMenus" asp-label="@T[MantleCmsLocalizableStrings.Settings.Blog.ShowOnMenus]" />
    <mantle-input asp-for="MenuPosition" asp-label="@T[MantleCmsLocalizableStrings.Settings.Blog.MenuPosition]" asp-validation-msg="true" type="number" />
    @*<mantle-input asp-for="UseAjax" asp-label="@T[MantleCmsLocalizableStrings.Settings.Blog.UseAjax]" />*@
    <div class="mb-3">
        @Html.Label("Roles", "Roles", new { @class = "form-label" })
        @Html.Mantle().RolesCheckBoxList("Roles", null, new { @class = "checkbox" }, new { data_bind = "checked: roles" })
    </div>
    <mantle-input asp-for="LayoutPathOverride" asp-label="@T[MantleCmsLocalizableStrings.Settings.Blog.LayoutPathOverride]" asp-validation-msg="true" />

    <hr />
    @await Html.Mantle().EmbeddedPartialAsync(EmbeddedPartialType.ResourceSettings)
</div>

<script asp-location="None" asp-exclude-from-bundle="true" type="text/javascript">
    function updateModel(viewModel, data) {
        viewModel.pageTitle = ko.observable("Blog");
        viewModel.dateFormat = ko.observable("YYYY-MM-DD HH:mm:ss");
        viewModel.itemsPerPage = ko.observable(5);
        viewModel.showOnMenus = ko.observable(true);
        viewModel.menuPosition = ko.observable(0);
        viewModel.useAjax = ko.observable(false);
        viewModel.layoutPathOverride = ko.observable(null);

        viewModel.accessRestrictions = null;
        viewModel.roles = ko.observableArray([]);

        viewModel.resources = ko.observableArray([]);

        if (data) {
            if (data.PageTitle) {
                viewModel.pageTitle(data.PageTitle);
            }
            if (data.DateFormat) {
                viewModel.dateFormat(data.DateFormat);
            }
            if (data.ItemsPerPage) {
                viewModel.itemsPerPage(data.ItemsPerPage);
            }
            if (data.ShowOnMenus && typeof data.ShowOnMenus === 'boolean') {
                viewModel.showOnMenus(data.ShowOnMenus);
            }
            if (data.MenuPosition) {
                viewModel.menuPosition(data.MenuPosition);
            }
            if (data.UseAjax && typeof data.UseAjax === 'boolean') {
                viewModel.useAjax(data.UseAjax);
            }
            if (data.AccessRestrictions) {
                viewModel.accessRestrictions = ko.mapping.fromJSON(data.AccessRestrictions);

                if (viewModel.accessRestrictions.Roles != null) {
                    var split = viewModel.accessRestrictions.Roles().split(',');
                    viewModel.roles(split);
                }
            }
            if (data.LayoutPathOverride) {
                viewModel.layoutPathOverride(data.LayoutPathOverride);
            }

            if (data.Resources) {
                viewModel.setResources(data.Resources);
            }
        }
    };

    function cleanUp(viewModel) {
        delete viewModel.pageTitle;
        delete viewModel.dateFormat;
        delete viewModel.itemsPerPage;
        delete viewModel.showOnMenus;
        delete viewModel.menuPosition;
        delete viewModel.useAjax;
        delete viewModel.accessRestrictions;
        delete viewModel.roles;
        delete viewModel.layoutPathOverride;
        delete viewModel.resources;
    }

    function onBeforeSave(viewModel) {
        const data = {
            PageTitle: viewModel.pageTitle(),
            DateFormat: viewModel.dateFormat(),
            ItemsPerPage: viewModel.itemsPerPage(),
            ShowOnMenus: viewModel.showOnMenus(),
            MenuPosition: viewModel.menuPosition(),
            UseAjax: viewModel.useAjax(),
            AccessRestrictions: JSON.stringify({
                Roles: viewModel.roles().join()
            }),
            LayoutPathOverride: viewModel.layoutPathOverride(),
            Resources: viewModel.resources()
        };

        viewModel.value(ko.mapping.toJSON(data));
    };
</script>